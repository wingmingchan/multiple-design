## Load in all of the core libraries and macros which need to be readily available
#drulykgImportPassThrough( "${BRISK[ 'MACROS_SITEPATH' ]}import-core-macros" )
#drulykgImportPassThrough( "${BRISK[ 'LIBRARIES_SITEPATH' ]}velocity/chanw/chanw-library-import" )
#drulykgImportPassThrough( "${BRISK[ 'LIBRARIES_SITEPATH' ]}velocity/drulykg/drulykg-html-asset" )
##
##
## The Page content type relies on the concept of a design namespace to delegate macro invocations
#drulykgImportPassThrough( "${BRISK_APP[ 'COMPONENTS_SITEPATH' ]}designNamespace" )
#resolveDesignNamespace()
##
##
## Load up the component file which contains macros to build out the various sections of the page
#drulykgImportPassThrough( "${BRISK_APP[ 'COMPONENTS_SITEPATH' ]}page-element-macros" )
##
##
## Load up the base assets into the cache
## We do this now so that the library cannot cache assets out of order
#addBaseAssets()
##
##
## The Library has a set of custom macros which they wish to import
#if( $currentPageSiteName.startsWith( 'library' ) )
    #if( $currentPageSiteName.startsWith( 'librarydev' ) )
        #drulykgImportPassThrough( 'site://librarydev/_cascade/formats/custom_macros' )
    #else
        #drulykgImportPassThrough( 'site://library/_cascade/formats/custom_macros' )
    #end
#end
##
##
## Make sure the design namespace is still valid after loading the Library's stuff
#isDesignNamespaceValid()
#if( $isDesignNamespaceValid == false )
##
    ## Force an exception by accessing an undefined array index
    #set( $void = [] )
    $void[ 0 ]
#end
##
##
## Import all block-processing formats
## These will be used in automatic macro invocation
## Load these after the library's custom_macros format to make sure our macros win in the event of macro-name collision
#drulykgImportPassThrough( "${BRISK_APP[ 'COMPONENTS_SITEPATH' ]}block_macros/_import-all-block-macros" )
##
##
## Set $siteConfigMap and process the setup blocks from the site root to this page's folder
#drulykgImportPassThrough( "${BRISK_APP[ 'COMPONENTS_SITEPATH' ]}processSiteSetup" )
#processSiteSetup()
##
##
## Check if any local CSS was attached in the setup blocks
## Explicitly assign these into 'assetPosition': 2 to control their render order
#foreach( $siteLocalCSS in $siteConfigMap[ 'siteLocalCSS' ] )
    #if( $siteLocalCSS.trim().startsWith( 'site://' ) )
        #drulykgHtmlAssetAdd( $siteLocalCSS.trim() { 'assetPosition' : 2 } )
    #else
        #drulykgHtmlAssetAdd( "site://${currentPageSiteName}/${siteLocalCSS.trim()}" { 'assetPosition' : 2 } )
    #end
#end
##
##
## #drulykgHtmlTag is able to automatically set the srcset attribute for an image so let's enable this for all images.
## Also set the siteRootPageNameOfFolder so that folders have a default page
#drulykgHtmlTag( $nulllll {
    'persistentSettings': {
        'autoSrcSetDimensions': {
            '2500w': [ '' ],
            '1200w': [ '-1000x500', '-1000x333' ],
            '750w': [ '-700x350', '-700x233' ],
            '460w': [ '-400x200', '-400x133' ]
        },
        'siteRootPageNameOfFolder': $siteConfigMap[ 'siteRootPageNameOfFolder' ]
    }
} )
##
##
## A folder should have a default page loaded when none is specified in the URL
#drulykgGetCascadeAssetLink( $nulllll {
    'persistentSettings': {
        'siteRootPageNameOfFolder': $siteConfigMap[ 'siteRootPageNameOfFolder' ]
    }
} )
#drulykgGetCascadeAssetUrl( $nulllll {
    'persistentSettings': {
        'siteRootPageNameOfFolder': $siteConfigMap[ 'siteRootPageNameOfFolder' ]
    }
} )
##
##
## TO BE REMOVED
## Process page-level-override chooser to bypass the execution 
## of the default tree or custom code specific for the page
## process page-level override for locally defined tree or code
## upstateProcessBlockChooser( $pageSystemDataStructure "admin-group/page-level-override" '<div id="hide-page-level-override">' '</div>' )
##
#*doc
    《/stepcode》
《/step》
《step id=“designEntryOutputPageContent”》
    《title》
Output page content
    《/title》
    《content》
Output the page content depending on whether either 《code》$executeLocallyDefinedCode《/code》 
or 《code》$importLocallyDefinedTree《/code》 is defined:
《ul》
《li》If 《code》$executeLocallyDefinedCode《/code》 is defined, then only this code is executed《/li》
《li》Else if 《code》$importLocallyDefinedTree《/code》 is defined, then the variables 
related to 《code》pre-main《/code》, 《code》main《/code》 and 《code》post-main《/code》 
will be resolved and the locally defined tree displayed《/li》
《li》Else the 《goto》rwd4TreeDesignTree《/goto》 will be displayed《/li》
《/ul》
    《/content》
    《stepcode》
doc*###
#**#
##
##
## Set a bunch of variables which will be interpolated in tree start tags
#getTopMiddleBottomInfo
##
##
## If a specific tree layout was selected in the page's metadata then it needs to win against
## whatever may have been chosen in a folder-level setup block
#set( $pageTreePicker = $currentPage.Metadata.getDynamicField( 'tree-picker' ).Value.trim() )
#if(
    $pageTreePicker.Class.Name &&
    $pageTreePicker != '' &&
    $pageTreePicker != 'inherited'
)
    #set( $siteConfigMap[ 'treeName' ] = $pageTreePicker )
#end
##
##
## If $siteConfigMap[ 'treeName' ] is still 'inherited' then convert it to its actual tree equivalent
#if( $siteConfigMap[ 'treeName' ] == 'inherited' )
    #set( $siteConfigMap[ 'treeName' ] = 'left-center' )
#end
##
##
## Based on the layout defined in $siteConfigMap[ 'treeName' ] we need to set
## additional vars which will be interpolated in tree start tags
#resolveRowColumnCssClass
##
##
## Import the html tree structure of this design namespace
## $siteConfigMap[ 'treeName' ] will be used to prune or add to this full html tree later
#drulykgImportPassThrough( "${BRISK_APP[ 'SCAFFOLDS_SITEPATH' ]}${design_namespace}/${BRISK_APP[ 'DESIGNS_TREE_NAME' ]}" )
##
##
## Modify (prune/add) html tree as needed based on $design_namespace
#if( $design_namespace == 'rwd4' )
##
    #set( $mainIndex = $chanwObjectNodeMap[ 'body' ].getIndex( $chanwObjectNodeMap[ 'main' ] ) )
    #set( $void = $chanwObjectNodeMap[ 'body' ].remove( $chanwObjectNodeMap[ 'main' ] ) )
    #chanwImportScript( $BRISK_APP[ 'SCAFFOLDS_PATH_NTS' ] $BRISK[ 'APP_SITE_NAME' ] "${design_namespace}/${siteConfigMap[ 'treeName' ]}-main-tree" )
##
    #set( $void = $chanwObjectNodeMap[ 'body' ].insert( $chanwObjectNodeMap[ 'main' ], $mainIndex ) )
    ## innermain
    #drulykgImportPassThrough( "${BRISK[ 'APP_SITEPATH' ]}scaffolds/${design_namespace}/innermain-tree" )
    #set( $void = $chanwObjectNodeMap[ 'middleElement' ].add( $chanwObjectNodeMap[ 'innermain' ] ) )
##
#elseif( $design_namespace == 'rwd5' )
    ## pruning mechanism
#end
##
##
## Setup block admin override
## If there is a page admin override then execute that after this
#if( $siteConfigMap[ 'treeConfigBlock' ].Class.Name )
    #chanwProcessBlockChooser( $siteConfigMap[ 'treeConfigBlock' ] )
#end
##
##
## Page admin override
#set( $masterLevelOverrideBlock = $currentPage.getStructuredDataNode( 'admin-group/master-level-override' ).Asset )
#if( $masterLevelOverrideBlock.Class.Name )
    #chanwProcessBlockChooser( $masterLevelOverrideBlock )
#end
##
##
## Traverse the tree and ceate markups
#if( $siteConfigMap[ 'displayHtmlCode' ] == true )
    #set( $markup = "#chanwDisplayTreeNodeRecursively( $chanwObjectNodeMap[ 'html' ] )" )
    $S_PRE$_EscapeTool.xml( $markup )$E_PRE
#elseif( $siteConfigMap[ 'displayMainCode' ] == true )
    #set( $markup = "#chanwDisplayTreeNodeRecursively( $chanwObjectNodeMap[ 'main' ] )" )
    $S_PRE$_EscapeTool.xml( $markup )$E_PRE
#else
    #set( $markup = "#chanwDisplayTreeNodeRecursively( $chanwObjectNodeMap[ 'html' ] )" )
##
    ## Handle automatic image helpers which let users know about
    ## external links, pdfs, docs, and other files before they
    ## click on an <a> tags
##
    ## Convert our current markup into a JDOM object
    ## so that we can execute xPath
    #chanwBuildXMLContentRoot( $markup )
##
    #drulykgApplyIconBricks( $chanwBuildXMLContentRoot )
##
    ## Turn the JDOM back into a string
    #set( $markup = $_SerializerTool.serialize( $drulykgApplyIconBricks, false ) )
##
    ## Convert Bricks strings into their final product
    #drulykgApplyBricks(
        $markup
        {
            'local_bricks_feed_file': $_.locateBlock( 'app/components/blocks/feed/bricks-feed', $BRISK[ 'APP_SITE_NAME' ] ),
            'subkey': $design_namespace
        }
    )
    $drulykgApplyBricks
#end
## Cleanup any resources which might be open and stop
## because we are done anyways
#if( $currentPageSiteName != 'web-services' )
#drulykgCleanupAndStop
#end
##
#*doc
    《/stepcode》
《/step》
《/documentationautoflow》
doc*###