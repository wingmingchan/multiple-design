#macro( processSiteSetup )
    ## create the map for configuration
    #set( $chanw_site_config_map_name = "siteConfigMap" )
    #set( $siteConfigMap = {} )
##
    ## special page functionality
    ## there are two blocks in app/components/blocks/script to turn these flags on
    #set( $siteConfigMap[ 'displayHtmlCode' ]   = false ) ## app/components/blocks/script/set-display-html-code-script
    #set( $siteConfigMap[ 'displayMainCode' ]   = false ) ## app/components/blocks/script/set-display-main-code-script
##
    ## page elements; for partial pages, put names of variables referencing elements in the list
    ## a page using this list must exist in _extra; if the list is empty, the page will be blank
    #set( $siteConfigMap[ "includeElements" ] = [] )
##
    ## theme and local stylesheet
    #set( $siteConfigMap[ 'siteThemeCSS' ]      = "" )
    #set( $siteConfigMap[ 'siteLocalCSS' ]      = "" )
##
    ## sitewide info
    #set( $siteConfigMap[ 'siteTitleString' ]   = "" )
    #set( $siteConfigMap[ 'siteContactPerson' ] = "" )
    #set( $siteConfigMap[ 'siteContactEmail' ]  = "" )
##
    ## attributes of html, head, body
    #set( $siteConfigMap[ 'htmlAttributes' ]    = "" )
    #set( $siteConfigMap[ 'headAttributes' ]    = "" )
    #set( $siteConfigMap[ 'bodyAttributes' ]    = "" )
##
    ## default rendering behaviors of page components
    #set( $siteConfigMap[ 'renderBreadcrumbs' ]      = true )
    #set( $siteConfigMap[ 'renderFolderNav' ]        = true )
    #set( $siteConfigMap[ 'renderGlobalNav' ]        = true )
    #set( $siteConfigMap[ 'renderPageContents' ]     = true )
    #set( $siteConfigMap[ 'renderSiteNav' ]          = true )
    #set( $siteConfigMap[ 'renderSiteTitle' ]        = true )
    #set( $siteConfigMap[ 'renderTopLeftGroup' ]     = true )
    #set( $siteConfigMap[ 'renderBottomRightGroup' ] = true )
    #set( $siteConfigMap[ 'folderNavOnTopLeft' ]     = true )
    #set( $siteConfigMap[ 'folderNavOnBottomRight' ] = !$siteConfigMap[ 'folderNavOnTopLeft' ] )
##
    ## lists to contain exceptions
    #set( $siteConfigMap[ 'skipPageElement' ] = {} )
    #set( $siteConfigMap[ 'skipPageElement' ][ 'breadcrumbs' ] = [] )
    #set( $siteConfigMap[ 'skipPageElement' ][ 'folderNav' ]   = [] )
    #set( $siteConfigMap[ 'skipPageElement' ][ 'h1' ]          = [] )
    #set( $siteConfigMap[ 'skipPageElement' ][ 'siteTitle' ]   = [] )
    #set( $siteConfigMap[ 'skipPageElement' ][ 'pageContent' ] = [] )
    
#*
    #set( $siteConfigMap[ 'pagesWithoutBreadcrumbs' ] = [] )
    #set( $siteConfigMap[ 'pagesWithoutFolderNav' ]   = [] )
    #set( $siteConfigMap[ 'pagesWithoutH1' ]          = [] )
    #set( $siteConfigMap[ 'pagesWithoutPageContent' ] = [] )
    #set( $siteConfigMap[ 'pagesWithoutSiteTitle' ]   = [] )
    #set( $siteConfigMap[ 'pagesWithoutWysiwyg' ]     = [] )
*#
##
    ## logo
    #set( $siteConfigMap[ 'siteLogoSiteName' ]   = $_brisk[ $BRISK_SITE_NAME ] )
    #set( $siteConfigMap[ 'siteLogoFolderPath' ] = "${_brisk[$BRISK_SITE_DESIGNS_FOLDER_PATH_NTS]}/${design_namespace}/${RWD4_PAGE_ELEMENT_FOLDER_NAME}" )
    #set( $siteConfigMap[ 'siteLogoFormatName' ] = "logo" )
    ## site nav
    #set( $siteConfigMap[ 'sitePagePublicFileExtension' ] = ".php" )
    #set( $siteConfigMap[ 'siteRootPageNameOfFolder' ]    = "index" )
    #set( $siteConfigMap[ 'siteNavHomeString' ]           = "Home" )
    #set( $siteConfigMap[ 'siteNavPath' ]                 = "/_extra/site-nav" + $siteConfigMap[ 'sitePagePublicFileExtension' ] )
##
    ## breadcrumbs
    #set( $siteConfigMap[ 'breadcrumbsHomeString' ]      = "Home" )
    #set( $siteConfigMap[ 'breadcrumbsSeparatorString' ] = "&gt;" )
##
    ## layouts
    #set( $siteConfigMap[ 'headerElement' ]        = "header" )
    #set( $siteConfigMap[ 'wrapperElement' ]       = "main" )
    #set( $siteConfigMap[ 'wrapperId' ]            = "main-div-wrapper" )
    #set( $siteConfigMap[ 'topElement' ]           = "div" )
    #set( $siteConfigMap[ 'topId' ]                = "left-menu-div" )
    #set( $siteConfigMap[ 'middleElement' ]        = "div" )
    #set( $siteConfigMap[ 'middleId' ]             = "page-content-div" )
    #set( $siteConfigMap[ 'bottomElement' ]        = "aside" )
    #set( $siteConfigMap[ 'bottomId' ]             = "" )
    #set( $siteConfigMap[ 'middleCenterWithNoTopLeftNoBottomRightCssClass' ] = "col-lg-12" )
    #set( $siteConfigMap[ 'hasTopRowLeftCol' ]                      = true )
    #set( $siteConfigMap[ 'hasBottomRowRightCol' ]                  = true )
    #set( $siteConfigMap[ 'topLeftCssClass' ]                       = "col-md-3" )
    #set( $siteConfigMap[ 'middleCenterCssClass' ]                  = "col-md-6" )
    #set( $siteConfigMap[ 'bottomRightCssClass' ]                   = "col-md-3" )
    #set( $siteConfigMap[ 'middleCenterWithNoTopLeftCssClass' ]     = "col-md-9" )
    #set( $siteConfigMap[ 'middleCenterWithNoBottomRightCssClass' ] = "col-md-9" )
    #set( $siteConfigMap[ 'footerElement' ]                         = "footer" )
    #set( $siteConfigMap[ 'pageCssClass' ]                          = "bg-white" )
##
    ## the default layout of this design
    #set( $tree_name = "left-center" )
##
    #********************************
     *
     * Setup format-based configuration.
     *
     * Specificity flows from the root
     * of the site all the way until
     * the sibling of $currentPage
     *
     * Keep this code until setup blocks
     * are used universally
     *
     *#
    ## Load a site-specific setup file from the root if it exists
    #if( $_.locate(
        "_cascade/${APP_SETUP_FORMAT_NAME}",
        $_FieldTool.in("com.hannonhill.cascade.model.dom.identifier.EntityTypes").TYPE_FORMAT,
        $currentPageSiteName
    ).Class.Name )
        #import( "site://${currentPageSiteName}/_cascade/${APP_SETUP_FORMAT_NAME}" )
    #end
##
    #********************************
     *
     * Setup block-based configuration
     *
     * Specificity flows from the root
     * of the site all the way until
     * the sibling of $currentPage
     *
     *#
    #upstateSetSiteSetupBlocks( $currentPage.ParentFolder )
    #foreach( $setupBlock in $siteSetupBlocks )
        #upstateProcessSetupBlock( $setupBlock )
    #end
##
    #macro( upstateGetSetupBlocks $folder_upstateGetSetupBlocks )
        #set( $currentFolder = $folder_upstateGetSetupBlocks )
##
        #upstateGetSetupBlockInCurrentFolder( $currentFolder )
        ## restrict iterative call to 10
        #foreach( $num in [ 1..10 ] )
            #set( $currentFolder = $currentFolder.ParentFolder )
            #upstateGetSetupBlockInCurrentFolder( $currentFolder )
            ## get out when reaching the root folder
            #if( $currentFolder.Path == "/" )
                #break
            #end
        #end
    #end
##
    #macro( upstateGetSetupBlockInCurrentFolder $folder_upstateGetSetupBlockInCurrentFolder )
        #set( $folderPath = $folder_upstateGetSetupBlockInCurrentFolder.Path )
##
        #if( $folderPath == "/" )
            #set( $setupBlockPath = $APP_SETUP_FORMAT_NAME )
        #else
            #set( $setupBlockPath = $folder_upstateGetSetupBlocks.Path + "/${APP_SETUP_FORMAT_NAME}" )
        #end
##
        #set( $setupBlock = "" )
        #set( $setupBlock = $_.locateBlock( $setupBlockPath, $currentPageSiteName ) )
##
        #if( $setupBlock != "" )
            #set( $dummy = $siteSetupBlocks.add( $setupBlock ) )
        #end
    #end
##
    #macro( upstateSetSiteSetupBlocks $currentFolderAPI_upstateSetSiteSetupBlocks )
##
        ## Set some internal vars
        #if( $upstateSetSiteSetupBlocksVars.Class.Name != 'java.util.LinkedHashMap' )
            #set( $upstateSetSiteSetupBlocksVars = {
                'i' : 0,
                'setupBlock' : $nulllllllllll,
                'void' : ''
            } )
        #end
##
        ## Make sure this variable is reset upon user-invokation of this macro
        ## Recursed calls will not fall into this #if() statement
        ## because i will be 1 or larger in recursion
        #if( $upstateSetSiteSetupBlocksVars[ 'i' ] == 0 )
            #set( $siteSetupBlocks = [] )
        #end
##
        ## Increment the recursion counter
        #set( $upstateSetSiteSetupBlocksVars[ 'i' ] = $upstateSetSiteSetupBlocksVars[ 'i' ] + 1 )
##
        ## Make sure we are dealing with a FolderAPIAdapter
        #if( $currentFolderAPI_upstateSetSiteSetupBlocks.Class.Name == 'com.hannonhill.cascade.api.adapters.FolderAPIAdapter' )
##
            ## Try and get the setup block API Adapter
            ## We use the current folder's siteName because
            ## there is no guarantee that the invoker used $currentPageSiteName
            #if( $currentFolderAPI_upstateSetSiteSetupBlocks.Path == '/' )
                #set( $upstateSetSiteSetupBlocksVars[ 'void' ] = $upstateSetSiteSetupBlocksVars.put( 'setupBlock', $_.locateBlock( $APP_SETUP_FORMAT_NAME, $currentFolderAPI_upstateSetSiteSetupBlocks.siteName ) ) )
            #else
                #set( $upstateSetSiteSetupBlocksVars[ 'void' ] = $upstateSetSiteSetupBlocksVars.put( 'setupBlock', $_.locateBlock( "${currentFolderAPI_upstateSetSiteSetupBlocks.Path}/${APP_SETUP_FORMAT_NAME}", $currentFolderAPI_upstateSetSiteSetupBlocks.siteName ) ) )
            #end
##
            ## We can simply test for .Class.Name because the .put() method call
            ## will actually set the setupBlock position to a null value if the
            ## .locateBlock() fails from above
            #if( $upstateSetSiteSetupBlocksVars[ 'setupBlock' ].Class.Name )
##
                ## Adding this setup block to position 0 of the list
                ## ensures that the blocks will be listed in order
                ## from least specificity to most
                #set( $upstateSetSiteSetupBlocksVars[ 'void' ] = $siteSetupBlocks.add( 0, $upstateSetSiteSetupBlocksVars[ 'setupBlock' ] ) )
            #end
##
            ## Try to get the parent folder of our current folder
            ## If the call to .getParentFolder() falis then the
            ## recursed call's #if() statement with FolderAPIAdapter
            ## will catch it
            #upstateSetSiteSetupBlocks( $currentFolderAPI_upstateSetSiteSetupBlocks.getParentFolder() )
        #end
##
        ## Decrement the recursion counter
        #set( $upstateSetSiteSetupBlocksVars[ 'i' ] = $upstateSetSiteSetupBlocksVars[ 'i' ] - 1 )
    #end
##
    #macro( upstateProcessSetupBlock $block_upstateProcessSetupBlock )
        ## $block_tree_name and $tree_name, are always defined here
        #set( $block_tree_name = $block_upstateProcessSetupBlock.Metadata.getDynamicField( "tree-picker" ).Value )
        #if( !$tree_name.Class || $block_tree_name != "inherited" )
            #set( $tree_name = $block_tree_name )
        #end
##
        #chanwGetFQINodeMap( $block_upstateProcessSetupBlock.StructuredData )
        #set( $mapKeySet = $chanwGetFQINodeMap.keySet() )
##
        #foreach( $key in $mapKeySet )
            ## remove prefix mul-
            #set( $siteConfigMapKey = $chanwGetFQINodeMap[ $key ][ $KEY_NODE ].Identifier.replaceAll( 'mul\-', '' ) )
##
            #set( $pagesWithout = "pagesWithout" )
            #if( $siteConfigMapKey.contains( $pagesWithout ) )
                #set( $siteConfigMapKey = $siteConfigMapKey.substring( $pagesWithout.length() ).toLowerCase() )
                #if( !$siteConfigMap[ 'skipPageElement' ][ $siteConfigMapKey ] )
                    #set( $siteConfigMap[ 'skipPageElement' ][ $siteConfigMapKey ] = [] )
                #end
                #set( $void = $siteConfigMap[ 'skipPageElement' ][ $siteConfigMapKey ].add( $chanwGetFQINodeMap[ $key ][ $KEY_NODE ].Asset.Path ) )
            #end
##
            #if( $chanwGetFQINodeMap[ $key ][ $KEY_SUBTYPE ] == $TYPE_PLAIN_TEXT && $chanwGetFQINodeMap[ $key ][ $KEY_DATA ] )
                #set( $siteConfigMap[ $siteConfigMapKey ] = $chanwGetFQINodeMap[ $key ][ $KEY_DATA ] )
            #elseif( $chanwGetFQINodeMap[ $key ][ $KEY_SUBTYPE ] == $TYPE_PAGE || $chanwGetFQINodeMap[ $key ][ $KEY_SUBTYPE ] == $TYPE_FILE )
                #if( $siteConfigMapKey == "siteThemeCSS" || $siteConfigMapKey == "siteLocalCSS" )
                    #set( $assetPath = "site://" + $chanwGetFQINodeMap[ $key ][ $KEY_NODE ].Asset.Site.Name + "/" + $chanwGetFQINodeMap[ $key ][ $KEY_DATA ] )
                    #set( $siteConfigMap[ $siteConfigMapKey ] = $assetPath )
                #else
                    #set( $dummy = $siteConfigMap[ $siteConfigMapKey ].add( $chanwGetFQINodeMap[ $key ][ $KEY_DATA ] ) )
                #end
            #end
        #end
    #end
    #set( $RWD4_PAGE_ELEMENT_FOLDER_NAME = "page_elements" )
#end